DROP SEQUENCE F15F1_Approver_seq ; 
create sequence F15F1_Approver_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Approver_PK_trig 
before insert on F15F1_Approver
for each row 
begin 
select F15F1_Approver_seq.nextval into :new.approver_id from dual; 
end; 
/
alter table F15F1_Approver add created date ; 
alter table F15F1_Approver add created_by VARCHAR2 (255) ; 
alter table F15F1_Approver add row_version_number integer ; 
alter table F15F1_Approver add updated date ; 
alter table F15F1_Approver add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Approver_AUD_trig 
before insert or update on F15F1_Approver 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Auth_seq ; 
create sequence F15F1_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Auth_PK_trig 
before insert on F15F1_Auth
for each row 
begin 
select F15F1_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15F1_Auth add created date ; 
alter table F15F1_Auth add created_by VARCHAR2 (255) ; 
alter table F15F1_Auth add row_version_number integer ; 
alter table F15F1_Auth add updated date ; 
alter table F15F1_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Auth_AUD_trig 
before insert or update on F15F1_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Comment_seq ; 
create sequence F15F1_Comment_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Comment_PK_trig 
before insert on F15F1_Comment
for each row 
begin 
select F15F1_Comment_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15F1_Comment add created date ; 
alter table F15F1_Comment add created_by VARCHAR2 (255) ; 
alter table F15F1_Comment add row_version_number integer ; 
alter table F15F1_Comment add updated date ; 
alter table F15F1_Comment add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Comment_AUD_trig 
before insert or update on F15F1_Comment 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Contact_seq ; 
create sequence F15F1_Contact_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Contact_PK_trig 
before insert on F15F1_Contact
for each row 
begin 
select F15F1_Contact_seq.nextval into :new.contact_id from dual; 
end; 
/
alter table F15F1_Contact add created date ; 
alter table F15F1_Contact add created_by VARCHAR2 (255) ; 
alter table F15F1_Contact add row_version_number integer ; 
alter table F15F1_Contact add updated date ; 
alter table F15F1_Contact add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Contact_AUD_trig 
before insert or update on F15F1_Contact 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Doc_seq ; 
create sequence F15F1_Doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Doc_PK_trig 
before insert on F15F1_Doc
for each row 
begin 
select F15F1_Doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15F1_Doc add created date ; 
alter table F15F1_Doc add created_by VARCHAR2 (255) ; 
alter table F15F1_Doc add row_version_number integer ; 
alter table F15F1_Doc add updated date ; 
alter table F15F1_Doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Doc_AUD_trig 
before insert or update on F15F1_Doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Emp_seq ; 
create sequence F15F1_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Emp_PK_trig 
before insert on F15F1_Emp
for each row 
begin 
select F15F1_Emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15F1_Emp add created date ; 
alter table F15F1_Emp add created_by VARCHAR2 (255) ; 
alter table F15F1_Emp add row_version_number integer ; 
alter table F15F1_Emp add updated date ; 
alter table F15F1_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Emp_AUD_trig 
before insert or update on F15F1_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_History_seq ; 
create sequence F15F1_History_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_History_PK_trig 
before insert on F15F1_History
for each row 
begin 
select F15F1_History_seq.nextval into :new.history_id from dual; 
end; 
/
alter table F15F1_History add created date ; 
alter table F15F1_History add created_by VARCHAR2 (255) ; 
alter table F15F1_History add row_version_number integer ; 
alter table F15F1_History add updated date ; 
alter table F15F1_History add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_History_AUD_trig 
before insert or update on F15F1_History 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Lab_seq ; 
create sequence F15F1_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Lab_PK_trig 
before insert on F15F1_Lab
for each row 
begin 
select F15F1_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15F1_Lab add created date ; 
alter table F15F1_Lab add created_by VARCHAR2 (255) ; 
alter table F15F1_Lab add row_version_number integer ; 
alter table F15F1_Lab add updated date ; 
alter table F15F1_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Lab_AUD_trig 
before insert or update on F15F1_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_RFE_seq ; 
create sequence F15F1_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_RFE_PK_trig 
before insert on F15F1_RFE
for each row 
begin 
select F15F1_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15F1_RFE add created date ; 
alter table F15F1_RFE add created_by VARCHAR2 (255) ; 
alter table F15F1_RFE add row_version_number integer ; 
alter table F15F1_RFE add updated date ; 
alter table F15F1_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_RFE_AUD_trig 
before insert or update on F15F1_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_RFE_Task_seq ; 
create sequence F15F1_RFE_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_RFE_Task_PK_trig 
before insert on F15F1_RFE_Task
for each row 
begin 
select F15F1_RFE_Task_seq.nextval into :new.RFE_task_id from dual; 
end; 
/
alter table F15F1_RFE_Task add created date ; 
alter table F15F1_RFE_Task add created_by VARCHAR2 (255) ; 
alter table F15F1_RFE_Task add row_version_number integer ; 
alter table F15F1_RFE_Task add updated date ; 
alter table F15F1_RFE_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_RFE_Task_AUD_trig 
before insert or update on F15F1_RFE_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Role_seq ; 
create sequence F15F1_Role_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Role_PK_trig 
before insert on F15F1_Role
for each row 
begin 
select F15F1_Role_seq.nextval into :new.role_code from dual; 
end; 
/
alter table F15F1_Role add created date ; 
alter table F15F1_Role add created_by VARCHAR2 (255) ; 
alter table F15F1_Role add row_version_number integer ; 
alter table F15F1_Role add updated date ; 
alter table F15F1_Role add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Role_AUD_trig 
before insert or update on F15F1_Role 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Status_seq ; 
create sequence F15F1_Status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Status_PK_trig 
before insert on F15F1_Status
for each row 
begin 
select F15F1_Status_seq.nextval into :new.status from dual; 
end; 
/
alter table F15F1_Status add created date ; 
alter table F15F1_Status add created_by VARCHAR2 (255) ; 
alter table F15F1_Status add row_version_number integer ; 
alter table F15F1_Status add updated date ; 
alter table F15F1_Status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Status_AUD_trig 
before insert or update on F15F1_Status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15F1_Task_seq ; 
create sequence F15F1_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15F1_Task_PK_trig 
before insert on F15F1_Task
for each row 
begin 
select F15F1_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15F1_Task add created date ; 
alter table F15F1_Task add created_by VARCHAR2 (255) ; 
alter table F15F1_Task add row_version_number integer ; 
alter table F15F1_Task add updated date ; 
alter table F15F1_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15F1_Task_AUD_trig 
before insert or update on F15F1_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15F1_Emp_emp_id_FK_0 ;
CREATE INDEX F15F1_Emp_emp_id_FK_0 ON F15F1_Approver(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_RFE_rfe_id_FK_1 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_1 ON F15F1_Approver(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Emp_emp_id_FK_2 ;
CREATE INDEX F15F1_Emp_emp_id_FK_2 ON F15F1_Auth(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_Emp_emp_id_FK_3 ;
CREATE INDEX F15F1_Emp_emp_id_FK_3 ON F15F1_Comment(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_RFE_rfe_id_FK_4 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_4 ON F15F1_Comment(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Emp_emp_id_FK_5 ;
CREATE INDEX F15F1_Emp_emp_id_FK_5 ON F15F1_Contact(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_RFE_rfe_id_FK_6 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_6 ON F15F1_Contact(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Role_role_code_FK_7 ;
CREATE INDEX F15F1_Role_role_code_FK_7 ON F15F1_Contact(F15F1_Role_role_code) ;
DROP INDEX F15F1_RFE_rfe_id_FK_8 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_8 ON F15F1_Doc(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Lab_lab_id_FK_9 ;
CREATE INDEX F15F1_Lab_lab_id_FK_9 ON F15F1_Emp(F15F1_Lab_lab_id) ;
DROP INDEX F15F1_Emp_emp_id_FK_10 ;
CREATE INDEX F15F1_Emp_emp_id_FK_10 ON F15F1_History(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_RFE_rfe_id_FK_11 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_11 ON F15F1_History(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Status_status_FK_12 ;
CREATE INDEX F15F1_Status_status_FK_12 ON F15F1_History(F15F1_Status_status) ;
DROP INDEX F15F1_Emp_emp_id_FK_13 ;
CREATE INDEX F15F1_Emp_emp_id_FK_13 ON F15F1_RFE(F15F1_Emp_emp_id) ;
DROP INDEX F15F1_Status_status_FK_14 ;
CREATE INDEX F15F1_Status_status_FK_14 ON F15F1_RFE(F15F1_Status_status) ;
DROP INDEX F15F1_RFE_rfe_id_FK_15 ;
CREATE INDEX F15F1_RFE_rfe_id_FK_15 ON F15F1_RFE_Task(F15F1_RFE_rfe_id) ;
DROP INDEX F15F1_Task_task_id_FK_16 ;
CREATE INDEX F15F1_Task_task_id_FK_16 ON F15F1_RFE_Task(F15F1_Task_task_id) ;
